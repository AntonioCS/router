<?php

if (function_exists('xdebug_disable'))
    xdebug_disable();

require '../../src/Router/router.php';
require '../../src/Router/Routes/route.php';
require '../../src/Router/Routes/routeDynamic.php';
require '../../src/Router/Routes/routeStatic.php';
require '../../lib/settingsManager/src/SettingsManager/settingsManager.php';


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-03 at 21:49:55.
 */
class routerTest extends PHPUnit_Framework_TestCase
{    
    /**
     * @var Router\router
     */
    protected $object;

    /**
     * @var SettingsManager\settingsManager 
     */
    protected static $config = null;
    /**
     * Using reflection to return the _config property of the router
     * http://www.php.net/manual/en/class.reflectionproperty.php#99661
     * 
     * @return ReflectionProperty  
     */
    private function getRouteObjectConfig() {
        $r = new ReflectionObject($this->object);
        $prop = $r->getProperty('_config');
        $prop->setAccessible(true);
        return $prop;
    }
    
    /**
     * 
     * @return array The configuration array of the route object (using reflection to make it available)
     */
    private function getRouteObjectConfigData() {      
        return $this->getRouteObjectConfig()->getValue($this->object);            
    }
    
    /**
     * Change the private property _config
     * 
     * @param array $data 
     */
    private function setRouteObjectConfigData($data) {
        $this->getRouteObjectConfig()->setValue($this->object, $data);
    }
    
    public static function setUpBeforeClass()
    {
        $env = getenv('ENV') ?: 'dev';
        require "../../config/config.$env.php";
        
        self::$config = new SettingsManager\settingsManager($routerConfig,true);
    }
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {        
        $this->object = new Router\router(self::$config);
    }
    
    /**
     * @covers router::addRoute
     */
    public function testAddRoute() {
        //$this->object->clearRoutes();
        $newRoute = new \Router\Routes\routeStatic('', 
            array(
                'module' => 'default',
                'controller' => 'index',
                'action' => ''
            )
        );
        $this->object->addRoute('get','teste',$newRoute);        
        $this->assertEquals($this->getRouteObjectConfigData()->fetch("routes/GET/teste"),$newRoute); 
        
        return $newRoute;
    }
    
    /**
     * @depends testAddRoute
     */
    public function testRouteMatchStatic($newRoute) {                
        $this->object->addRoute('get','teste',$newRoute);
        $res = $this->object->matchRoute('','get');
        
        var_dump($res);
        
    }
}
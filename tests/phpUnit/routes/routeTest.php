<?php

if (function_exists('xdebug_disable'))
    xdebug_disable();

require '../../../src/Router/Routes/Route.php';
require '../../../src/Router/Routes/RouteDynamic.php';
require '../../../src/Router/Routes/RouteStatic.php';


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-03 at 21:49:55.
 */
class routeTest extends PHPUnit_Framework_TestCase
{

    protected function setUp() {              
    }
    
    public function testStaticRouteMatch() {
        $x = new Router\Routes\routeStatic('index');
        
        $this->assertTrue($x->match('index'));
    }
    
    public function testRouteOptions() {
        $options = array(
            'module' => 'default',
            'controller' => 'index',
            'action' => ''
        );
        $expected_options = array(
            'module' =>
                "default",
            'controller' =>
                "index",
            'action' =>
                "",
            'func' =>
                null,
            'class' =>
                array(),
            'params' =>
                null
        );
        $route = new Router\Routes\route('', $options);                
        
        $this->assertEquals($expected_options,$route->getOptions());
    }
    
    
    public function testDynamicRouteGeneration() {
        $x = new Router\Routes\RouteDynamic('user/:username');
        
        $this->assertEquals("user/(\S+)",$x->getRoutePattern());
    }
    
    public function testDynamicRouteMatch() {
        $x = new Router\Routes\RouteDynamic('user/:username/blablabla/:number');                
        
        $this->assertTrue($x->match('user/antoniocs/blablabla/1234'));        
    }
    public function testDynamicRouteMatchOptions() {
        
        $x = new Router\Routes\RouteDynamic('user/:username/blablabla/:number');        
        $x->match('user/antoniocs/blablabla/1234');        
        
        $options = $x->getOptions();
        $this->assertTrue($options['params']['username'] == 'antoniocs');
        $this->assertTrue($options['params']['number'] == '1234');
    }
    
    //The route will have little to do with Anonymous Functions or Classes this is just so that I can test that everything goes well when I assign them to the routes
    public function testRouteAnonymousFunctionsPassing() {
        $x = new Router\Routes\routeStatic('index', function() { echo 'hello'; });
        $this->assertTrue($x->match('index'));                
    }
    
    public function testRouteClassPassing() {
        $x = new Router\Routes\routeStatic('index',array('class' => array('classname','method')));
        $this->assertTrue($x->match('index'));                
    }
    
}
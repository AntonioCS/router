<?php

if (function_exists('xdebug_disable'))
    xdebug_disable();

require '../../../src/Router/router.php';
require '../../../src/Router/dispatcher.php';
require '../../../src/Router/Routes/route.php';
require '../../../src/Router/Routes/routeDynamic.php';
require '../../../src/Router/Routes/routeStatic.php';


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-03 at 21:49:55.
 */
class routerTest extends PHPUnit_Framework_TestCase
{    
    /**
     * @var Router\router
     */
    protected $object;

    /**
     * @var SettingsManager\settingsManager 
     */
    protected static $config = null;
    /**
     * Using reflection to return the _config property of the router
     * http://www.php.net/manual/en/class.reflectionproperty.php#99661
     * 
     * @return ReflectionProperty  
     */
    private function getRouteObjectConfig() {
        $r = new ReflectionObject($this->object);
        $prop = $r->getProperty('_config');
        $prop->setAccessible(true);
        return $prop->getValue($this->object);
    }
      
    public static function setUpBeforeClass()
    {        
        
    }
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {        
        $dispatcherMock = $this->getMockBuilder('\Router\dispatcher')
                            ->getMock();
        
        $this->object = new Router\router();
        $this->object->setDispatcher($dispatcherMock);        
    }
    
    /**
     * @covers router::addRoute
     */
    public function testAddRoute() {        
        $newRouteMock = $this->getMockBuilder('\Router\Routes\routeStatic')
                            ->setConstructorArgs(
                                                array('',
                                                    array(
                                                        'module' => 'default',
                                                        'controller' => 'index',
                                                        'action' => ''
                                                    )
                                                 )
                                    )
                            ->getMock();
        
        $this->object->addRoute('get','test',$newRouteMock);
        
        $config = $this->getRouteObjectConfig();
                
        $this->assertEquals(
                $config['routes']['GET']['test'],                
                $newRouteMock
        ); 
        
        return $newRouteMock;        
    }
    
    /**
     * @depends testAddRoute
     */
    public function testRouteMatchStatic($newRoute) {
        //http://stackoverflow.com/questions/6821546/what-happens-to-objects-passed-between-dependent-phpunit-tests
        $newRoute->expects($this->any())
            ->method('match')
            ->will($this->returnValue(true));
        
        $this->object->addRoute('get','test',$newRoute);
        $this->assertTrue($this->object->matchRoute('','get') != false);        
    }
}
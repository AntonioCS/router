<?php

if (function_exists('xdebug_disable'))
    xdebug_disable();

require '../src/router.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-03 at 21:49:55.
 */
class routerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var router
     */
    protected $object;
    
    
    /**
     * Using reflection to return the _config property of the router
     * http://www.php.net/manual/en/class.reflectionproperty.php#99661
     * 
     * @return ReflectionProperty  
     */
    private function getRouteObjectConfig() {
        $r = new ReflectionObject($this->object);
        $prop = $r->getProperty('_config');
        $prop->setAccessible(true);
        return $prop;
    }
    
    /**
     * 
     * @return array The configuration array of the route object (using reflection to make it available)
     */
    private function getRouteObjectConfigData() {      
        return $this->getRouteObjectConfig()->getValue($this->object);            
    }
    
    /**
     * Change the private property _config
     * 
     * @param array $data 
     */
    private function setRouteObjectConfigData($data) {
        $this->getRouteObjectConfig()->setValue($this->object, $data);
    }


    private function addTheseRoutes() {
        $routes = array(
            'get' => array(
                'teste' => 'teste__1',
                '/index\.php\?(\d+)/' => 'index/$1',
                '/^(.+)$/'  => 'index/$1',
                '' => 'index'
             ),
            'put' => array(),
            'delete' => array(),
            'post' => array()
        );
        
        $this->object->addRoute('get', $routes['get']);

        //$this->object->addRoute($routes);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new router;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {}

    public function testClearRoutes() {
        $this->object->clearRoutes();
        $c = $this->getRouteObjectConfigData();
        
        $this->assertTrue(empty($c['routes']));
    }

    /**
     * @covers router::addRoute
     */
    public function testAddRoute() {
        $this->object->clearRoutes();
        
        $this->object->addRoute('get','teste','teste__1');
        
        $c = $this->getRouteObjectConfigData();
        
        $this->assertEquals(array('teste' => 'teste__1'),$c['routes']['GET']);
    }

    public function testAddRouteArray() {
        $this->object->clearRoutes();
        $routes = array('teste' => 'teste__1');
        $this->object->addRoute('GET',$routes);
        
        $c = $this->getRouteObjectConfigData();
        
        $this->assertEquals($routes,$c['routes']['GET']);
    }


    public function testMatchRouteNormal() {
        $this->object->clearRoutes();
        $this->addTheseRoutes();

        $this->assertEquals('teste__1',$this->object->matchRoute('teste'));

        $this->assertEquals('index',$this->object->matchRoute(''));
    }

    public function testMatchRouteRegex() {
        //$this->addTheseRoutes();
        $this->assertEquals('index/5',$this->object->matchRoute('index.php?5'));
        $this->assertEquals('index/test1',$this->object->matchRoute('test1'));
    }

    /**
    * @expectedException InvalidControllerDirectoryException
    */
    public function testSetControllersDir() {
        $this->object->setControllersDir('no_where/');
    }

    public function testSetControllersDirValid() {
        $this->object->setControllersDir('controllers/');        
        $c = $this->getRouteObjectConfigData();
        $this->assertEquals(array('controllers/'),$c['controllers']['dir']);
                //$this->object->getControllerDir());
    }



    /**
     * @covers router::run
     * @todo   Implement testRun().
     */
    public function testRun() {


    }
}
